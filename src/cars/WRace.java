/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cars;


import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.Timer;

/**
 *
 * @author jonny
 */
public class WRace extends javax.swing.JFrame{

    private long start = 0;
    private long end = 0;
    private CCars cars;
    private EClass category;
    private LinkedList<CRacer> racers;
    private Map<Integer,CRacer> racers_chart;
    private Map<CRacer,Integer> racers_indexes;
    private CRace race;
    private Set<Integer> finished;
    private Timer time;
    
    
    /**
     * Creates new form Race
     */
    public WRace(CCars cars,EClass category,final LinkedList<CRacer> racs) {
        setFocusable(true);
            KeyboardFocusManager.getCurrentKeyboardFocusManager()
            .addKeyEventDispatcher(new KeyEventDispatcher() {
                @Override
                public boolean dispatchKeyEvent(KeyEvent e) {
                    char key = e.getKeyChar();  
                    if(race.isRacing()){
                        if(e.getID() == KeyEvent.KEY_PRESSED){
                            if ((key >= '1' && key <= '9')) {
                                int u = key - '0' - 1;
                                if(race.isQueued() && u <= racers.size()){
                                    if(race.getLaps(racers.get(u)).finished(end) && !finished.contains(u)){
                                        finished.add(u);
                                    }
                                    race.chooseLap(racers.get(u));
                                    revalidateValues();
                                }
                            }
                        }
                              
                      }
                    System.out.println(""+key);
                  return false;
                }
          });
        initComponents();
        this.cars = cars;
        this.category = category;
        this.racers = racs;
        
        finished = new HashSet<Integer>();
        
        this.setVisible(true);
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        
        race = new CRace(racers,this);
        
        cars.selectRace(race);
        racers_indexes = new HashMap<CRacer, Integer>();
        
        racers_chart = new HashMap<Integer, CRacer>();
        
        int indexes = 1;
        for (Iterator<CRacer> it = racers.iterator(); it.hasNext();) {
            CRacer racer = it.next();
            racers_chart.put(indexes, racer);
            racers_indexes.put(racer, indexes);
            indexes++;
        }
        racersResults.setVerticalTextPosition(JLabel.TOP);
        racersResults.setHorizontalTextPosition(JLabel.LEFT);
        redrawPanel();
        paint_time();
        
    }

    private void redrawPanel(){
        String text = "<html>";
        text += "<table>";
        text += "<tr><td>Pozice</td><td>Index</td><td>Jm√©no</td><td>Kola</td>";
        text += "</tr>";
        
        for(int index = 1; index <= racers.size(); index++){
            text += "<tr>";
            text += "<td>" + index + "</td>";
            text += "<td>" + racers_indexes.get(racers_chart.get(index)) + "</td>";
            text += "<td>" + racers_chart.get(index).Name() + "</td>";
            CLaps laps = race.getLaps(racers_chart.get(index));
            text += "<td>" + laps.getLapTimes() + "</td>";
            text += "</tr>";
        }
        text += "</table>";
        text += "</html>";
        
        racersResults.setText(text);
        
        repaint();
    }
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        timeLabel = new javax.swing.JLabel();
        timeSetup = new javax.swing.JComboBox();
        racersResults = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        timeLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        timeLabel.setText(""+new Date().toString()+"");

        timeSetup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "7","1","2","3","4","5","6","8","9" }));

        racersResults.setText("");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(racersResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(32, 32, 32)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(timeSetup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 623, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(timeLabel)
                .addGap(18, 18, 18)
                .addComponent(racersResults, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(timeSetup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            kill();
        } catch (IOException ex) {
            Logger.getLogger(WRace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        start = (new Date()).getTime();
        end = start + (Long.parseLong((String)timeSetup.getSelectedItem()) * 60 * 1000);
        race.startRace();
    }//GEN-LAST:event_jButton2ActionPerformed

   
    private void kill() throws IOException{
        time.stop();
        time = null;
        race = null;
        export();
        this.hide();
    }
    
    
    /**
     * Drawing panels with results
     * every result 
     */
    public void revalidateValues(){
        racers_chart = race.getPositions();
        redrawPanel();
    }
   
    
    
    private  void paint_time(){
        time = new Timer(10, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if(race.isRacing()){
                    Date t = new Date();
                    long now = end - t.getTime();
                    if(now <= 0){
                        race.stopRace();
                    }
                    if(finished.size() >= racers.size()){
                        race.finish();
                        try {
                            export();
                        } catch (IOException ex) {
                            Logger.getLogger(WRace.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        time.stop();
                    }
                    long milis = now%1000;
                    String h = new String();
                    long hours = (((now/1000)/60)/60)%24;
                    long seconds = (now/1000)%60;
                    long minutes = ((now/1000)/60)%60;
                    if(hours>0 && hours<1){
                        h = hours+":";
                    }
                    else{
                        h="";
                    }
                    timeLabel.setText(h+""+minutes+":"+seconds+"."+milis);
                }
            }
        });
        time.start();
    }
    
    
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel racersResults;
    private static javax.swing.JLabel timeLabel;
    private javax.swing.JComboBox timeSetup;
    // End of variables declaration//GEN-END:variables

    
    public void export() throws IOException{
        String plain = "";
        String text = "<html>\n";
        text += "<table>\n";
        text += "<tr><td>Pozice</td><td>Index</td><td>Jm√©no</td><td>Kola</td>";
        text += "</tr>\n";
        
        for(int index = 1; index <= racers.size(); index++){
            text += "<tr>";
            text += "<td>" + index + "</td>";
            text += "<td>" + racers_indexes.get(racers_chart.get(index)) + "</td>";
            text += "<td>" + racers_chart.get(index).Name() + "</td>";
            CLaps laps = race.getLaps(racers_chart.get(index));
            text += "<td>" + laps.getLapTimes() + "</td>";
            text += "</tr>\n";
            plain += racers_chart.get(index).getID() + "\t" +
                    racers_chart.get(index).Name() + "\t" + 
                    laps.getLapTimes() + "\n";
        }
        text += "</table>";
        text += "</html>\n";
        FileWriter w = new FileWriter(""+new Date().getTime() + ".html");
        
        w.write(text);
        
        FileWriter wp = new FileWriter(""+new Date().getTime() + ".txt");
        wp.write(plain);
        w.close();
        wp.close();
    }
    
    
}
